PYTHON = python3
VENV = venv
ACTIVATE = . $(VENV)/bin/activate
MODE ?= NORMAL
APP_FILE = app.py
UTILLS_FILE = utils.py
LOG_MSG ?= "App started in $(MODE) mode"

ifeq ($(MODE), dev)
	PORT = 5000
	DEBUG = True
else ifeq ($(MODE), prod)
	PORT = 8000
	DEBUG = False
else
	PORT = 8080
	DEBUG = False
endif

.PHONY: setup run log clean deps status

setup:
	@echo "Checking virtual environment..."
	if [ ! -d "$(VENV)" ]; then \
		$(PYTHON) -m venv $(VENV); \
		echo "Virtual environment created."; \
	else \
		echo "Virtual environment already exists."; \
	fi
	@echo "Installing dependencies..."
	$(ACTIVATE) && pip install --upgrade pip && pip install -r requirements.txt
	echo "Setup complete."

run: 
	@echo "🚀 Running Flask app in $(MODE) mode (port: $(PORT))..."
	@$(ACTIVATE) && export FLASK_APP=$(APP_FILE) && flask run --port=$(PORT)

log:
	@echo "📝 Writing log entry..."
	@$(ACTIVATE) && $(PYTHON) $(UTILS_FILE) $(LOG_MSG)

# clean logs
clean:
	@echo "🧹 Cleaning up log files..."
	rm -f logs/app.log
	@echo "Logs cleaned ✅"

# 5️⃣ Reinstall dependencies; dependencies were already installed during
# the virtual environment setup, but this target allows for reinstallation if
# dependencies change and the requirements.txt file is updated.
deps:
	@echo "📦 Reinstalling dependencies..."
	@$(ACTIVATE) && pip install -r requirements.txt

# 6️⃣ Check environment status
status:
	@if [ -d "$(VENV_DIR)" ]; then \
		echo "✅ Virtual environment exists."; \
	else \
		echo "❌ Virtual environment not found."; \
	fi
	@$(ACTIVATE) && pip show flask > /dev/null 2>&1 && echo "✅ Flask installed." || echo "❌ Flask not installed."
